---
title: "Coding R Using Quarto Markdown"
author: "[YOUR NAME HERE]"
date: "`r lubridate::today()`"
format: 
  html: 
    embed-resources: true
    toc: true 
    toc_depth: 4
editor_options: 
  chunk_output_type: console
---

# Get ready for R!

## Adjust your R preferences. 

First, we need to make some adjustments to R setting: 

- Go to Tools -> Global Options (or RStudio -> Preferences)
 * General : 
   + Uncheck Restore .RData into workspace at startup
   + Uncheck Restore most recently opened project at startup
   + Uncheck Restore previously opened source documents at startup
   + Uncheck Always save history (even when not saving .RData)
   + Uncheck Set Save .RData to workspace on exit: Never
 * Code: 
   + Editing tab, Check use native pipe operator
   + Display tab, Check show margin (80 characters)

## What are R & RStudio?

R is an open source software environment that implements statistical computing and graphics. In other words, R is a basically language you can use to communicate with your computer. 

RStudio is an integrated development environment (IDE) for R. IDE is a fancy word for any software application that helps programmers develop software code more efficiently.

RStudio makes writing R code easier using a Graphical User Interface (GUI, pronounced "gooey"). A GUI is a form of user interface that allows users to interact with computers through clicking on buttons and icons or selecting from menus. 


## User Interface

In RStudio, there is a menu/tool bar at the top, as well as several panels. The top left panel typically shows your files and text/code you write in the files. There are several other frequently used panels.

- The Console panel allows you to run code and shows the output and any warning/error messages. 
- The Environment panel shows the R objects (we will talk about this more) temporarily stored in your R session. 
- The Files panel allows you to navigate folders and open files saved on your computer. 
- The Plots panel shows any graphics you generate using code. 

These panels can all be moved around and rearranged to your liking under the View tab. 


## What is Quarto? 

Quarto is an open-source scientific and technical publishing system. It allows you to author interactive and readable documents using various programming software.

In Quarto notebooks, we can write text just like in a word document but also write and run code in "code chunks". Importantly, Quarto can render the same notebook into files of different styles and formats (pdf, html, slides, manuscripts, etc.) by only minimally changing the code.

This feature makes it easier to: 1) annotate and explain the code you wrote using plain text, and 2) run code and show the output to support an argument you made in plain text. Additionally, Quarto is not limited to any coding language. You can create documents with embedded R, Python, Visual Studio, and other code in Quarto, making it very flexible.

A Quarto notebook is usually consists of three components:

- YAML header
- Plain text
- Code chunk

Quarto website: <https://quarto.org/>
Get started: <https://quarto.org/docs/get-started/hello/rstudio.html>

### YAML header

YAML header is located at the top of this notebook. We can set up a variety of formatting and rendering options in the YAML header. Scroll up to the top and take a look at the several options we will use for the purpose of this class!

- title: title of the rendered document
- author: author(s) of the rendered document
- date: we use `lubridate::today()` to print the date when we rendered the document
- format: options for formatting
  - html: render to html format
  - toc: whether or not to include a interactive table of contents
  - toc_depth: how many levels to include in the table of contents
  - embed-resources: whether to save plots as part of the html file or in a separate folder
- editor_options: options for writing code in RStudio
  - chunk_output_type: where to print the output if you run a line of code in RStudio


### Markdown Text

In a Quarto Markdown (QMD) file, everything not in a code chunk will be treated as text with formatting, such as:

in-line text


*italics*, **bold**, ***bold italics***, superscript^2^, subscript~2~, and ~~strikethrough~~.


hyperlinks:<https://en.wikipedia.org/wiki/Elephant>


embedded image:
![Elephant](https://upload.wikimedia.org/wikipedia/commons/thumb/3/37/African_Bush_Elephant.jpg/330px-African_Bush_Elephant.jpg)

and inline code: `r 1 + 1`


# Headings can be a useful way to organize your rendered document. This is a 1st Level Heading

## This is a 2nd Level Heading

### This is a 3rd Level Heading

#### This is a 4th level heading ...


You can read more about the Markdown expressions here: <https://quarto.org/docs/authoring/markdown-basics.html>


### Code Chunk

In a Quarto Markdown (QMD) file, a code chunk begins with a new line containing three backticks (```) and a pair of parentheses ({}). And it ends with new line with another three backticks. You can type this out, or press control + alt + I, or command + option + I for mac, to insert a code chunk.


The coding language we want to use goes between the parentheses (in our case: r). 

To run a single line of code in the code chunk, select the line of code and hit `command` + `enter` (Mac) or `control` + `enter` (PC). To run an entire code chunk you can click the small green triangle at the top-left corner of the chunk. 
```{r}
# This is a code chunk that works just like a typical R script.

# Use hash-tags for comments for specific commands/lines of code. Try to keep 
# general comments or headers outside of code chunks as Markdown text.

print("Otherwise, whatever is in a code chunk will be run as code")

warning("To run a line of code, click-select a line of code and hit Control/Command + Enter. To run a whole code chunk, click on the little green triangle in the top-right corner of the code chunk.")
```


You could label, control the output, and do more advanced stuff with a code chunk.
See here: <https://quarto.org/docs/computations/execution-options.html>

For example: Let's plot a random diagonal line. I want the output of this code, but not the code itself. We could set echo: false after the #| handle.
```{r}
#| echo: false

plot(-1000:1000, 1000:-1000)
```

## Rendering
When you are done with your analysis, writing, and everything else, you would want to finalize everything and render your quarto notebook. Rendering will run all the code chunks and arrange all elements in your notebook (including Markdown text you have written, code, and output from code) into an output file that looks nicer.


In the YAML formatting section above, we set this QMD to knit to an html file. Click on the render button at the top of this window to render this file!


The rendered file can typically be located in the folder where you store this quarto notebook file. Take a look!



# Let's run some R code!

## Basic arithmetic

```{r}
2 + 3   # Addition
2 - 3   # Subtraction
2 * 3   # Multiplication
2 / 3   # Division
2 ^ 3   # Exponentiation


-2--3
-2 - -3 # This is identical, but easier to read 
```

## Logical statements

Logical statements return Boolean Logic values ("TRUE" or "FALSE"). 

```{r}
2 < 3
2 > 3
2 <= 3
2 == 2  
2 != 2
```

## R objects

R works by storing information by object names. To store something as an R object, use the assignment operator, `<-`.

```{r}
a <- 1 
b <- 4 # One command per line is the typical (and good) style
```

Check the environment window in your GUI (on the upper right in RStudio). You should be able to see a and b, along with their stored values. 


You can also request the stored value of an R object by typing its name and running it as a line of code.
```{r}
a
b
```


What if we request the value of `whatever`? Why do we get an error?

```{r}
#whatever 
```

Errors are R's way of telling you it can't do something. If you don't know what an error means, it is useful to copy and paste the error into Google for help. Here, the error is because there is no object named `whatever` in the R environment.

We can also do many fancy things with R objects, including arithmetic, creating a new object with existing objects, etc.

```{r}
a + b 
a * b 

c <- a + b
c 
```


We can also save text as objects. We can make words/sentences a *string* using quotes. Note that we can over-write my original object `b`. What would happen if we do not add the quotes?

```{r}
b <- "Hello World!"
b

# a <- Hello World!
```


R objects have different classes. Object classes tell R what kinds of things you can do with an object (e.g., you can't do arithmetic with strings or with character objects). We have seen the numeric class (i.e., numbers) and string class (i.e., text) above already.

```{r}
class(a)
class(b) 
```


There are also additional classes other than these two. 
```{r}
class(3L)
class(TRUE)
class(factor(c("R","RMarkdown","Quarto")))
```


Multiple data elements (e.g., numbers) can be combined into vectors (e.g., a sequence of numbers). In other words, a vector is a sequence of data elements of the same class.


We use the concatenate function c() to link/combine data elements. 
```{r}
vec_1 <- c(1,3,5)
```


What if we concatenate elements of different data types?
```{r}
vec_2 <- c(1,"text",5)
# What is the data type of vec_2?
class(vec_2)
```

Making elements of different types a vector forces its elements to the less stringent data type (i.e., character is less stringent than numeric because numbers can be seen as characters but not vice-versa).

Vectors can also be used for arithmetic operations
```{r}
vec_1
vec_1 + 2
vec_1 > 3
vec_1 + vec_1
```


### Plotting, the fanciest things you can do with R

R comes with some simple (and fake) datasets which live implicitly in the R environment. Here, let's use one of them, `mtcars`, to demonstrate graphing.

```{r}
library(tidyverse)

d <- mtcars

d |> mutate(cyl = factor(cyl)) |> 
     ggplot(aes(x = cyl)) + 
        geom_bar() +
        theme_classic() +
        scale_x_discrete(drop = FALSE) +
        labs(x = "Number of Engine Cylinders",
             y = "Number of Car Models") + 
        coord_cartesian(ylim = c(0,15))

d |> mutate(cyl = factor(cyl)) |> 
     ggplot(aes(x = mpg, y = hp, 
                color = cyl, fill = cyl)) + 
        geom_smooth(method = "lm", alpha = .2) +
        geom_point() +
        theme_classic() +
        labs(x = "Miles Per Gallon",
             y = "Horsepower",
             color = "Number of Engine Cylinders",
             fill = "Number of Engine Cylinders") + 
        coord_cartesian(ylim = c(0, 400))
```



# Sample Data Analysis & Markdown Annotations

## Setup

We follow a set of best practices to ensure that our code is maximally replicable.

### Set Conflict Policies

We will often use R functions created and shared by other people by loading R packages. Conflict policies are important so that we know if we load two packages with conflicting functions (i.e., different functions with same name). Using `options(conflicts.policy = "depends.ok")` at the top of your setup code chunk (i.e., before you load any packages) will produce an error if two conflicting packages are loaded. There are ways to set custom conflict policies and work around conflicts (e.g., only loading certain functions from a package).  

```{r}
options(conflicts.policy = "depends.ok")
```


### Load Packages

You should load the **minimum** number of packages needed to execute your code. Oftentimes this may just be `tidyverse`. Loading as few packages as possible also helps reduce the likelihood of conflicts.   


To load packages, use the `library()` function. If you have never installed the package, you will need to do that using `install.packages()` before using the package for the first time.

```{r}
library(tidyverse)
```


### Set Path  

You will often need to read in data from files saved on your computer. By using a ***relative path*** to specify file locations, the same code can be used to read in files without causing errors when run by different users or even on different computers (especially useful for Github repo!), if the directory is structured the same way. In other words, relative paths allow for easier collaboration and code sharing!


We can use the `getwd()` to check our current working directory, which should be the root folder where your R project file is saved. Next, we will type in the relative location of your data in reference to the root folder save it as an R object. Below, a hypothetical example of path_data is provided.

```{r}
getwd()
path_data <- "g_e_study_2024/data"
```

### Example Setup Code Chunk
```{r}
#| output: false # This tells R not to print the output of this code chunk

options(conflicts.policy = "depends.ok")
library(tidyverse)

path_data <- "g_e_study_2024/data"
```
