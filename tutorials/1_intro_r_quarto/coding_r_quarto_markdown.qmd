---
title: "Coding R Using Quarto Markdown"
author: "LiChen Dong"
date: "`r lubridate::today()`"
format: 
  html: 
    embed-resources: true
    toc: true 
    toc_depth: 4
editor_options: 
  chunk_output_type: console
---

# Get ready for R!

## Adjust your R preferences. 

First, you need to make some adjustments to R setting: 

- Go to Tools -> Global Options (or RStudio -> Preferences)
 * General : 
   + Uncheck Restore .RData into workspace at startup
   + Uncheck Restore most recently opened project at startup
   + Uncheck Restore previously opened source documents at startup
   + Uncheck Always save history (even when not saving .RData)
   + Uncheck Set Save .RData to workspace on exit: Never
 * Code: 
   + Editing tab, Check use native pipe operator
   + Display tab, Check show margin (80 characters)

## What are R & RStudio?

R is an open source software environment that implements statistical computing and graphics. In other words, R is a basically language you can use to communicate with your computer. 

RStudio is an integrated development environment (IDE) for R. IDE is a fancy word for any software application that helps programmers develop software code more efficiently.

RStudio makes writing R code easier using a Graphical User Interface (GUI, pronounced "gooey"). A GUI is a form of user interface that allows users to interact with computers through clicking on buttons and icons or selecting from menus. 


## User Interface

In RStudio, there is a menu/tool bar at the top, as well as several panels. The top left panel typically shows your files and text/code you write in the files. There are several other frequently used panels.

- The Console panel (in the left lower corner) allows you to run code and shows the output and any warning/error messages. 
- The Environment panel (in the upper right corner) shows the R objects (we will talk about this more) temporarily stored in your R session. 
- The Files panel (in the lower right corner) allows you to navigate folders and open files saved on your computer. 
- The Plots panel (in the lower right corner) shows any graphics you generate using code. 
- The Packages panel (in the lower right corner) shows all the packages that are downloaded this will be depicted by a check next to the package

These panels can all be moved around and rearranged to your liking under the View tab. 


## What is Quarto? 

Quarto is an open-source scientific and technical publishing system. It allows you to author interactive and readable documents using various programming software.

In Quarto notebooks, you can write text just like in a word document but also write and run code in "code chunks". Importantly, Quarto can render the same notebook into files of different styles and formats (pdf, html, slides, manuscripts, etc.) by only minimally changing the code.

This feature makes it easier to: 1) annotate and explain the code you wrote using plain text, and 2) run code and show the output to support an argument you made in plain text. Additionally, Quarto is not limited to any coding language. You can create documents with embedded R, Python, Visual Studio, and other code in Quarto, making it very flexible.

A Quarto notebook is usually consists of three components:

- YAML header
- Plain text
- Code chunk

Quarto website: <https://quarto.org/>
Get started: <https://quarto.org/docs/get-started/hello/rstudio.html>

### YAML header

YAML header is located at the top of this notebook. You can set up a variety of formatting and rendering options in the YAML header. Scroll up to the top and take a look at the several options you will use for the purpose of working in the lab!

- title: title of the rendered document
- author: author(s) of the rendered document
- date: use `lubridate::today()` to print the date when you render the document
- format: options for formatting
  - html: render to html format
  - toc: whether or not to include a interactive table of contents
  - toc_depth: how many levels to include in the table of contents
  - embed-resources: whether to save plots as part of the html file or in a separate folder
- editor_options: options for writing code in RStudio
  - chunk_output_type: where to print the output if you run a line of code in RStudio


### Markdown Text

In a Quarto Markdown (QMD) file, everything not in a code chunk will be treated as text with formatting, such as:

in-line text


*italics*, **bold**, ***bold italics***, superscript^2^, subscript~2~, and ~~strikethrough~~.


hyperlinks:<https://en.wikipedia.org/wiki/Elephant>


Math formula, such as $P(Y|X) = \frac{e^{b_0 + b_1X}}{1 + e^{b_0 + b_1X}}$ (click on anywhere between the two dollar signs to preview the output of this math formula; this is a logistic regression model)


embedded image:
![Elephant](https://upload.wikimedia.org/wikipedia/commons/thumb/3/37/African_Bush_Elephant.jpg/330px-African_Bush_Elephant.jpg)

and inline code: 1 + 1 = `r 1 + 1`


# Headings can be a useful way to organize your rendered document. This is a 1st Level Heading

## This is a 2nd Level Heading

### This is a 3rd Level Heading

#### This is a 4th level heading ...


You can read more about the Markdown expressions here: <https://quarto.org/docs/authoring/markdown-basics.html>


### Code Chunk

In a Quarto Markdown (QMD) file, a code chunk begins with a new line containing three backticks (```) and a pair of parentheses ({}). And it ends with new line with another three backticks. You can type this out, or press control + alt + I, or command + option + I for mac, to insert a code chunk.


The coding language you want to use goes between the parentheses (in our case: r). 

To run a single line of code in the code chunk, select the line of code and hit `command` + `enter` (Mac) or `control` + `enter` (PC). To run an entire code chunk you can click the small green triangle at the top-left corner of the chunk. To run all the current code chunks click the run button in the top right corner then the run all button.
```{r}
# This is a code chunk that works just like a typical R script.

# Use hash-tags for comments for specific commands/lines of code. Try to keep 
# general comments or headers outside of code chunks as Markdown text.

print("Otherwise, whatever is in a code chunk will be run as code")

warning("To run a line of code, click-select a line of code and hit Control/Command + Enter. To run a whole code chunk, click on the little green triangle in the top-right corner of the code chunk.")
```


You could label, control the output, and do more advanced stuff with a code chunk.
See here: <https://quarto.org/docs/computations/execution-options.html>

For example: Let's plot a random diagonal line. You want the output of this code, but not the code itself. You could set echo: false after the #| handle.
```{r}
#| echo: false

plot(-1000:1000, 1000:-1000)
```

## Rendering
When you are done with your analysis, writing, and everything else, you would want to finalize everything and render your quarto notebook. Rendering will run all the code chunks and arrange all elements in your notebook (including Markdown text you have written, code, and output from code) into an output file that looks nicer.


In the YAML formatting section above, I have set this QMD to knit to an html file. Click on the render button at the top of this window to render this file!


The rendered file can typically be located in the folder where you store this quarto notebook file. Take a look!



# Let's run some R code!

## Basic arithmetic

```{r}
2 + 3   # Addition
2 - 3   # Subtraction
2 * 3   # Multiplication
2 / 3   # Division
2 ^ 3   # Exponentiation


-2--3
-2 - -3 # This is identical, but easier to read 
```

## Logical statements

Logical statements return Boolean Logic values ("TRUE" or "FALSE"). 

```{r}
2 < 3
2 > 3
2 <= 3
2 == 2  
2 != 2
```

## R objects

R works by storing information by object names. To store something as an R object, use the assignment operator, `<-`. What this will do is rename the value to the left of the arrow to be what is to the left of the arrow. In this example a <- 1 the 1 is now known as a.

```{r}
a <- 1 
b <- 4 # One command per line is the typical (and good) style
```

Check the environment window in your GUI (on the upper right in RStudio). You should be able to see a and b, along with their stored values. 


You can also request the stored value of an R object by typing its name and running it as a line of code.
```{r}
a
b
```


What if you request the value of `whatever`? Why do you get an error?

```{r}
#whatever 
```

Errors are R's way of telling you it can't do something. If you don't know what an error means, it is useful to copy and paste the error into Google for help. Here, the error is because there is no object named `whatever` in the R environment.

You can also do many fancy things with R objects, including arithmetic, creating a new object with existing objects, etc.

```{r}
a + b 
a * b 

c <- a + b
c 
```


You can also save text as objects. You can make words/sentences a *string* using quotes. Note that you can over-write my original object `b`. What would happen if you do not add the quotes?

```{r}
b <- "Hello World!"
b

# a <- Hello World!
```


R objects have different classes. Object classes tell R what kinds of things you can do with an object (e.g., you can't do arithmetic with strings or with character objects). You have seen the numeric class (i.e., numbers) and string class (i.e., text) above already.

```{r}
class(a)
class(b) 
```


There are also additional classes other than these two. 
```{r}
class(3L)
class(TRUE)
class(factor(c("R","RMarkdown","Quarto")))
```


Multiple data elements (e.g., numbers) can be combined into vectors (e.g., a sequence of numbers). In other words, a vector is a sequence of data elements of the same class.


Use the concatenate function c() to link/combine data elements. 
```{r}
vec_1 <- c(1,3,5)
vec_1
```


What if you concatenate elements of different data types?
```{r}
vec_2 <- c(1,"text",5)
# What is the data type of vec_2?
class(vec_2)
```

Making elements of different types a vector forces its elements to the less stringent data type (i.e., character is less stringent than numeric because numbers can be seen as characters but not vice-versa).

Vectors can also be used for arithmetic operations
```{r}
vec_1
vec_1 + 2
vec_1 > 3
vec_1 + vec_1
```


## Functions 

In the above section, you used `class()` to retrieve the class of an R object. `class()` is one example of functions in R. Functions are R commands that are usually in the form of a text handle (e.g., `class`) followed by a pair of parentheses (e.g., `()`).

To use a function, you first need to provide input to the function in the parentheses. Your input can be other R objects (e.g., see how you used `class()` above), but it can also be arguments that provide settings for the function itself. For example, if you want to round a number to the 2nd digit or the 4th after the decimal, you can do the following:

```{r}
round(100/3, digits = 2)
round(100/3, digits = 4)
```

Note that our first input is essentially an R object, which is the output numeric element from algebraic operation $100 \div 3$. The second input is an argument where you provide the settings for `round()` so that it rounds to the 2nd decimal place.

Different arguments (i.e., settings) are available for different functions. Most of the time, the R help page for a particular function would be informative for what arguments are available. You can call the help page using the `?` operator.

```{r}
?round
```

In the help page, several sections can be helpful:

- Usage: lists all relevant functions and the arguments they take
- Arguments: explains specific arguments to the functions listed above
- Details: provides additional information on how the functions work
- Value: shows what are output of the function and their object class

Sometimes, the help page may be too difficult to understand, or it may not be very informative. It could be useful to search online (i.e., google) by the name of the function. Some package creators maintain the documentation and guide for their packages on a separate website. Also, other people may have the same questions as you do, and their questions might have been answered on forum websites, such as stack overflow.

## R packages

As mentioned above, R is an open source software. There are many people out there developing custom functions that are useful for data analysis beyond the functions available in base R. These functions are shared in various ways, but most frequently distributed as *R pacakges* via The Comprehensive R Archive Network (CRAN).


First, you need to ensure the R package that houses the functions you want is installed on your computer. Installation only needs to be done once, unless you uninstalled the package, reinstalled your system, or you want to update to a newer version of the package.


Run `install.packages()` to install a package called `RXKCD`. What package is it? You can get help on a package and its functions using the double question mark `??` operator.
```{r}
#install.packages("RXKCD",repos = "http://cran.us.r-project.org") 
??RXKCD
```


Functions written by different creators may share the same name but have different functionality. Therefore, to use certain functions, R needs to know which packages the functions are from. There are two ways of doing this.


First way: you can call a function in a specific package by using the `::` operator. This is preferred if you only need one function from an entire package or if you do not use the functions from this package frequently.

```{r}
RXKCD::getXKCD(552)
```


Second way: you can use `library()` to load the entire package, so that R will use functions from the pacakge by default without you having to call the package with `::`.

```{r}
library(RXKCD)
getXKCD(552)
```


The caveat with the second way is that when you load packages that have functions with overlapping names, the function in the later loaded package will mask the function with the same name in the other package. Run the following code chunk and note the output section titled "Conflicts".

```{r}
#install.packages("tidyverse",repos = "http://cran.us.r-project.org") 
#install.packages("car",repos = "http://cran.us.r-project.org") 

library(tidyverse)
library(car)
```


Therefore, use `library()` only if you will use multiple functions from the same package repeatedly. We can also prevent masking of same-name functions by setting our conflicts policy using `options()`, such that loading packages with same-name functions will give you an error message. Then, we can load packages with `library()` but ask R to exclude (i.e., not load) certain functions that cause conflicts in a package. 


*Note*: You need to set conflicts policy before loading any packages. You should load packages at the top of your script, strictly before any code are run. See notebook in tutorials/standard_workflow for best practices.

```{r}
options(conflicts.policy = "depends.ok")
library(car, exclude = c("recode", "some"))
```


Some functions are shared not as packages via CRAN, but as source R scripts on Github. You can source those R scripts (often named XXXX.R) using `source_url()` from package `devtools`. As an example, we will source some functions shared on GitHub by Dr. John Curtin, a professor in the Psych department at UW-Madison whose research are on machine learning algorithms that predict lapses among individuals diagnosed with substance use disorders.

```{r}
# If you have never installed the package devtools, you would need to install it first.
# install.packages("")
devtools::source_url("https://raw.githubusercontent.com/jjcurtin/lab_support/refs/heads/main/fun_eda.R")
```


## Plotting, the fanciest things you can do with R

R comes with some simple (and fake) datasets which live implicitly in the R environment. Here, let's use one of them, `mtcars`, to demonstrate graphing.

```{r}
d <- mtcars

d |> mutate(cyl = factor(cyl)) |> 
     ggplot(aes(x = cyl)) + 
        geom_bar() +
        theme_classic() +
        scale_x_discrete(drop = FALSE) +
        labs(x = "Number of Engine Cylinders",
             y = "Number of Car Models") + 
        coord_cartesian(ylim = c(0,15))

d |> mutate(cyl = factor(cyl)) |> 
     ggplot(aes(x = mpg, y = hp, 
                color = cyl, fill = cyl)) + 
        geom_smooth(method = "lm", alpha = .2) +
        geom_point() +
        theme_classic() +
        labs(x = "Miles Per Gallon",
             y = "Horsepower",
             color = "Number of Engine Cylinders",
             fill = "Number of Engine Cylinders") + 
        coord_cartesian(ylim = c(0, 400))

```

### How to load a dataset
Oftentimes you will have to load data from a dataset that is given to you. To do this you'll have to make sure the package `tidyverse` is installed. 
```{r}
storms <- read.csv(tutorials/Starbucks.csv)
```


### Common errors
Why isn't my R object appearing?
Sometimes you have to call the r object again for you to be able to view it's outcome.
For example x <- data 
            x

